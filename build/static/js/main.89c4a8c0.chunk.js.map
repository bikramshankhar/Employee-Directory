{"version":3,"sources":["components/SearchBox.js","components/TableData.js","utils/API.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","class","className","onChange","handleInputChange","value","search","name","type","placeholder","onClick","handleFormSubmit","TableData","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","dob","date","axios","get","Container","state","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","handleSearch","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.89c4a8c0.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction SearchBox(props) {\n    return (\n        <div class=\"jumbotron\">\n            <div class=\"container\">\n                <h2 className=\"text-center\">Associate Directory</h2>\n                <form>\n                    <div className=\"input-group mb-3\">\n                \n                        <input\n                            onChange={props.handleInputChange}\n                            value={props.search}\n                            name=\"search\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Search for an Employee\"\n                        />\n                    <div onClick={props.handleFormSubmit} className=\"input-group-append\">\n                    <span className=\"input-group-text\">search</span>\n\n                    </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n  }\n  \n  export default SearchBox;","import React from \"react\";\n\nfunction TableData(props) {\n      return (\n        <table className=\"container \">\n            <thead>\n                <tr>\n                    <th>Image</th>\n                    <th onClick={props.sortByName}>Name</th>\n                    <th>Phone</th>\n                    <th>E-mail</th>\n                    <th>DOB</th>\n                </tr>\n            </thead>\n\n            <tbody className= \"\">\n                {props.results.map(result => (\n                    <tr className=\"table\" key={result.login.uuid}>\n                        <td> <img className=\"\n                        \"src={result.picture.medium} alt=\"\" /></td>\n                        \n                        <td>{result.name.first + \" \" + result.name.last}  </td>\n\n                        <td>{result.cell}</td>\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\n                        <td>{result.dob.date}</td>\n\n                    </tr>\n                ))}\n            </tbody>\n        </table >\n    )\n\n}\n\nexport default TableData","import axios from \"axios\";\nexport default {\n    // Gets all users\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React, { Component } from \"react\"\nimport SearchBox from \"./SearchBox\"\nimport TableData from \"./TableData\"\nimport API from \"../utils/API\";\n\nclass Container extends Component {\n    state = {\n        search: \"\",\n        employees: [],\n        filteredEmployees: [],\n        order: \"\"\n\n    };\n\n    componentDidMount() {\n        API.getUsers().then(res => this.setState({\n            employees: res.data.results,\n            filteredEmployees: res.data.results\n        })).catch(err => console.log(err))\n    }\n\n    sortByName = () => {\n        const filtereds = this.state.filteredEmployees;\n        if (this.state.order === \"asc\") {\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n            console.log(sorteds)\n\n            this.setState({\n                filteredEmployees: sorteds,\n                order: \"desc\"\n            })\n        } else {\n\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n            console.log(sorteds)\n\n            this.setState({\n                filteredEmployees: sorteds,\n                order: \"asc\"\n            })\n\n        }\n    }\n\n    handleInputChange = event => {\n\n        const employees = this.state.employees;\n        const UserInput = event.target.value;\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\n        )\n        this.setState({\n            filteredEmployees,\n        });\n\n\n    };\n\n    employeeSearch = () => {\n        API.getUsers()\n            .then(res => this.setState({\n                filteredEmployees: res.data.results,\n                employees: res.data.results\n            }))\n            .catch(err => console.log(err))\n    }\n\n    handleSearch = event => {\n        event.preventDefault();\n        if (!this.state.search) {\n            alert(\"Enter a name\")\n        }\n        const { employees, search } = this.state;\n\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\n\n        this.setState({\n            filteredEmployees\n        });\n    }\n\n\n\n    render() {\n\n        return (\n            <div>\n\n                <SearchBox\n                    employee={this.state.employees}\n                    handleSearch={this.handleSearch}\n                    handleInputChange={this.handleInputChange} />\n                <TableData results={this.state.filteredEmployees}\n                    sortByName={this.sortByName}\n\n                />\n            </div >\n\n\n        )\n    }\n}\n\nexport default Container","import React from 'react';\nimport Container from \"./components/Container\"\n\n\nfunction App() {\n  return (\n    <Container />\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}